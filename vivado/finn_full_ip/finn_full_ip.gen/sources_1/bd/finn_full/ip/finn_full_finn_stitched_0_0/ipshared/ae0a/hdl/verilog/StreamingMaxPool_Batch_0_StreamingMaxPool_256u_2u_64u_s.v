// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module StreamingMaxPool_Batch_0_StreamingMaxPool_256u_2u_64u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in0_V_TDATA,
        in0_V_TVALID,
        in0_V_TREADY,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 71'd1;
parameter    ap_ST_fsm_state2 = 71'd2;
parameter    ap_ST_fsm_state3 = 71'd4;
parameter    ap_ST_fsm_state4 = 71'd8;
parameter    ap_ST_fsm_state5 = 71'd16;
parameter    ap_ST_fsm_state6 = 71'd32;
parameter    ap_ST_fsm_state7 = 71'd64;
parameter    ap_ST_fsm_state8 = 71'd128;
parameter    ap_ST_fsm_state9 = 71'd256;
parameter    ap_ST_fsm_state10 = 71'd512;
parameter    ap_ST_fsm_state11 = 71'd1024;
parameter    ap_ST_fsm_state12 = 71'd2048;
parameter    ap_ST_fsm_state13 = 71'd4096;
parameter    ap_ST_fsm_state14 = 71'd8192;
parameter    ap_ST_fsm_state15 = 71'd16384;
parameter    ap_ST_fsm_state16 = 71'd32768;
parameter    ap_ST_fsm_state17 = 71'd65536;
parameter    ap_ST_fsm_state18 = 71'd131072;
parameter    ap_ST_fsm_state19 = 71'd262144;
parameter    ap_ST_fsm_state20 = 71'd524288;
parameter    ap_ST_fsm_state21 = 71'd1048576;
parameter    ap_ST_fsm_state22 = 71'd2097152;
parameter    ap_ST_fsm_state23 = 71'd4194304;
parameter    ap_ST_fsm_state24 = 71'd8388608;
parameter    ap_ST_fsm_state25 = 71'd16777216;
parameter    ap_ST_fsm_state26 = 71'd33554432;
parameter    ap_ST_fsm_state27 = 71'd67108864;
parameter    ap_ST_fsm_state28 = 71'd134217728;
parameter    ap_ST_fsm_state29 = 71'd268435456;
parameter    ap_ST_fsm_state30 = 71'd536870912;
parameter    ap_ST_fsm_state31 = 71'd1073741824;
parameter    ap_ST_fsm_state32 = 71'd2147483648;
parameter    ap_ST_fsm_state33 = 71'd4294967296;
parameter    ap_ST_fsm_state34 = 71'd8589934592;
parameter    ap_ST_fsm_state35 = 71'd17179869184;
parameter    ap_ST_fsm_state36 = 71'd34359738368;
parameter    ap_ST_fsm_state37 = 71'd68719476736;
parameter    ap_ST_fsm_state38 = 71'd137438953472;
parameter    ap_ST_fsm_state39 = 71'd274877906944;
parameter    ap_ST_fsm_state40 = 71'd549755813888;
parameter    ap_ST_fsm_state41 = 71'd1099511627776;
parameter    ap_ST_fsm_state42 = 71'd2199023255552;
parameter    ap_ST_fsm_state43 = 71'd4398046511104;
parameter    ap_ST_fsm_state44 = 71'd8796093022208;
parameter    ap_ST_fsm_state45 = 71'd17592186044416;
parameter    ap_ST_fsm_state46 = 71'd35184372088832;
parameter    ap_ST_fsm_state47 = 71'd70368744177664;
parameter    ap_ST_fsm_state48 = 71'd140737488355328;
parameter    ap_ST_fsm_state49 = 71'd281474976710656;
parameter    ap_ST_fsm_state50 = 71'd562949953421312;
parameter    ap_ST_fsm_state51 = 71'd1125899906842624;
parameter    ap_ST_fsm_state52 = 71'd2251799813685248;
parameter    ap_ST_fsm_state53 = 71'd4503599627370496;
parameter    ap_ST_fsm_state54 = 71'd9007199254740992;
parameter    ap_ST_fsm_state55 = 71'd18014398509481984;
parameter    ap_ST_fsm_state56 = 71'd36028797018963968;
parameter    ap_ST_fsm_state57 = 71'd72057594037927936;
parameter    ap_ST_fsm_state58 = 71'd144115188075855872;
parameter    ap_ST_fsm_state59 = 71'd288230376151711744;
parameter    ap_ST_fsm_state60 = 71'd576460752303423488;
parameter    ap_ST_fsm_state61 = 71'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 71'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 71'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 71'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 71'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 71'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 71'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 71'd147573952589676412928;
parameter    ap_ST_fsm_pp1_stage0 = 71'd295147905179352825856;
parameter    ap_ST_fsm_state71 = 71'd590295810358705651712;
parameter    ap_ST_fsm_state72 = 71'd1180591620717411303424;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in0_V_TDATA;
input   in0_V_TVALID;
output   in0_V_TREADY;
output  [63:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in0_V_TREADY;
reg out_V_TVALID;

(* fsm_encoding = "none" *) reg   [70:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in0_V_TDATA_blk_n;
wire    ap_CS_fsm_state66;
wire   [0:0] icmp_ln78_fu_1437_p2;
wire    ap_CS_fsm_state67;
reg    out_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln89_reg_1539;
reg   [7:0] outpix_reg_1408;
wire   [7:0] yp_1_fu_1419_p2;
reg   [7:0] yp_1_reg_1496;
wire    ap_CS_fsm_state65;
wire   [0:0] icmp_ln77_fu_1425_p2;
wire   [8:0] add_ln78_fu_1431_p2;
reg   [8:0] add_ln78_reg_1505;
reg    ap_block_state66;
wire   [7:0] select_ln78_fu_1449_p3;
reg   [7:0] select_ln78_reg_1513;
reg   [63:0] in0_V_read_reg_1518;
reg   [6:0] buf_V_addr_129_reg_1523;
wire   [7:0] add_ln79_fu_1474_p2;
wire   [7:0] add_ln89_fu_1479_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state69_pp1_stage0_iter0;
reg    ap_block_state70_pp1_stage0_iter1;
reg    ap_block_state70_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln89_fu_1485_p2;
wire    ap_CS_fsm_state68;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state69;
reg   [6:0] buf_V_address0;
reg    buf_V_ce0;
reg    buf_V_we0;
wire   [63:0] buf_V_q0;
reg   [6:0] buf_V_address1;
reg    buf_V_ce1;
reg    buf_V_we1;
reg   [63:0] buf_V_d1;
reg   [7:0] yp_reg_1375;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state71;
reg   [8:0] indvar_flatten_reg_1386;
reg   [7:0] xp_reg_1397;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire   [63:0] zext_ln79_fu_1457_p1;
wire   [63:0] zext_ln89_fu_1491_p1;
reg    ap_block_pp1_stage0_01001;
wire   [63:0] or_ln709_fu_1467_p2;
wire   [0:0] icmp_ln79_fu_1443_p2;
wire   [63:0] or_ln709_1_fu_1462_p2;
wire    ap_CS_fsm_state72;
reg   [70:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 71'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

StreamingMaxPool_Batch_0_StreamingMaxPool_256u_2u_64u_s_buf_V #(
    .DataWidth( 64 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
buf_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_V_address0),
    .ce0(buf_V_ce0),
    .we0(buf_V_we0),
    .d0(64'd0),
    .q0(buf_V_q0),
    .address1(buf_V_address1),
    .ce1(buf_V_ce1),
    .we1(buf_V_we1),
    .d1(buf_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state69) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state68)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state69) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state69);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state68)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((in0_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
        indvar_flatten_reg_1386 <= add_ln78_reg_1505;
    end else if (((1'b1 == ap_CS_fsm_state65) & (icmp_ln77_fu_1425_p2 == 1'd0))) begin
        indvar_flatten_reg_1386 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        outpix_reg_1408 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln89_fu_1485_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        outpix_reg_1408 <= add_ln89_fu_1479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((in0_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
        xp_reg_1397 <= add_ln79_fu_1474_p2;
    end else if (((1'b1 == ap_CS_fsm_state65) & (icmp_ln77_fu_1425_p2 == 1'd0))) begin
        xp_reg_1397 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        yp_reg_1375 <= yp_1_reg_1496;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        yp_reg_1375 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in0_V_TVALID == 1'b0) & (icmp_ln78_fu_1437_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state66))) begin
        add_ln78_reg_1505 <= add_ln78_fu_1431_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (icmp_ln78_fu_1437_p2 == 1'd0))) begin
        buf_V_addr_129_reg_1523 <= zext_ln79_fu_1457_p1;
        in0_V_read_reg_1518 <= in0_V_TDATA;
        select_ln78_reg_1513 <= select_ln78_fu_1449_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln89_reg_1539 <= icmp_ln89_fu_1485_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        yp_1_reg_1496 <= yp_1_fu_1419_p2;
    end
end

always @ (*) begin
    if ((icmp_ln89_fu_1485_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state69 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state69 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln89_fu_1485_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        buf_V_address0 = zext_ln89_fu_1491_p1;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        buf_V_address0 = zext_ln79_fu_1457_p1;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        buf_V_address0 = 64'd127;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        buf_V_address0 = 64'd125;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        buf_V_address0 = 64'd123;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        buf_V_address0 = 64'd121;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        buf_V_address0 = 64'd119;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        buf_V_address0 = 64'd117;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        buf_V_address0 = 64'd115;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        buf_V_address0 = 64'd113;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        buf_V_address0 = 64'd111;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        buf_V_address0 = 64'd109;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        buf_V_address0 = 64'd107;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        buf_V_address0 = 64'd105;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        buf_V_address0 = 64'd103;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        buf_V_address0 = 64'd101;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        buf_V_address0 = 64'd99;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        buf_V_address0 = 64'd97;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        buf_V_address0 = 64'd95;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        buf_V_address0 = 64'd93;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        buf_V_address0 = 64'd91;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        buf_V_address0 = 64'd89;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        buf_V_address0 = 64'd87;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        buf_V_address0 = 64'd85;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buf_V_address0 = 64'd83;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        buf_V_address0 = 64'd81;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        buf_V_address0 = 64'd79;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        buf_V_address0 = 64'd77;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        buf_V_address0 = 64'd75;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        buf_V_address0 = 64'd73;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        buf_V_address0 = 64'd71;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        buf_V_address0 = 64'd69;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        buf_V_address0 = 64'd67;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        buf_V_address0 = 64'd65;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        buf_V_address0 = 64'd63;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_V_address0 = 64'd61;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        buf_V_address0 = 64'd59;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf_V_address0 = 64'd57;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        buf_V_address0 = 64'd55;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        buf_V_address0 = 64'd53;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        buf_V_address0 = 64'd51;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buf_V_address0 = 64'd49;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_V_address0 = 64'd47;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_V_address0 = 64'd45;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buf_V_address0 = 64'd43;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buf_V_address0 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buf_V_address0 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buf_V_address0 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buf_V_address0 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buf_V_address0 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_V_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buf_V_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buf_V_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        buf_V_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buf_V_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buf_V_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_V_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_V_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buf_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_V_address0 = 64'd1;
    end else begin
        buf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        buf_V_address1 = buf_V_addr_129_reg_1523;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        buf_V_address1 = 64'd126;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        buf_V_address1 = 64'd124;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        buf_V_address1 = 64'd122;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        buf_V_address1 = 64'd120;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        buf_V_address1 = 64'd118;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        buf_V_address1 = 64'd116;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        buf_V_address1 = 64'd114;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        buf_V_address1 = 64'd112;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        buf_V_address1 = 64'd110;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        buf_V_address1 = 64'd108;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        buf_V_address1 = 64'd106;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        buf_V_address1 = 64'd104;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        buf_V_address1 = 64'd102;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        buf_V_address1 = 64'd100;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        buf_V_address1 = 64'd98;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        buf_V_address1 = 64'd96;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        buf_V_address1 = 64'd94;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        buf_V_address1 = 64'd92;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        buf_V_address1 = 64'd90;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        buf_V_address1 = 64'd88;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        buf_V_address1 = 64'd86;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        buf_V_address1 = 64'd84;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        buf_V_address1 = 64'd82;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        buf_V_address1 = 64'd80;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        buf_V_address1 = 64'd78;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        buf_V_address1 = 64'd76;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        buf_V_address1 = 64'd74;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        buf_V_address1 = 64'd72;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        buf_V_address1 = 64'd70;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        buf_V_address1 = 64'd68;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        buf_V_address1 = 64'd66;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        buf_V_address1 = 64'd64;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        buf_V_address1 = 64'd62;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        buf_V_address1 = 64'd60;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        buf_V_address1 = 64'd58;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        buf_V_address1 = 64'd56;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        buf_V_address1 = 64'd54;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        buf_V_address1 = 64'd52;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        buf_V_address1 = 64'd50;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        buf_V_address1 = 64'd48;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        buf_V_address1 = 64'd46;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        buf_V_address1 = 64'd44;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        buf_V_address1 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        buf_V_address1 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        buf_V_address1 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        buf_V_address1 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        buf_V_address1 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        buf_V_address1 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        buf_V_address1 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        buf_V_address1 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        buf_V_address1 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        buf_V_address1 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        buf_V_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        buf_V_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_V_address1 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        buf_V_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_V_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buf_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_V_address1 = 64'd0;
    end else begin
        buf_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state64) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | (~((in0_V_TVALID == 1'b0) & (icmp_ln78_fu_1437_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state66)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln89_fu_1485_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        buf_V_ce0 = 1'b1;
    end else begin
        buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state64) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((in0_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state67)))) begin
        buf_V_ce1 = 1'b1;
    end else begin
        buf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        buf_V_d1 = or_ln709_fu_1467_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state64))) begin
        buf_V_d1 = 64'd0;
    end else begin
        buf_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state64) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln89_fu_1485_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        buf_V_we0 = 1'b1;
    end else begin
        buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state64) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((in0_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state67)))) begin
        buf_V_we1 = 1'b1;
    end else begin
        buf_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | ((1'b1 == ap_CS_fsm_state66) & (icmp_ln78_fu_1437_p2 == 1'd0)))) begin
        in0_V_TDATA_blk_n = in0_V_TVALID;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((in0_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state67)) | (~((in0_V_TVALID == 1'b0) & (icmp_ln78_fu_1437_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state66) & (icmp_ln78_fu_1437_p2 == 1'd0)))) begin
        in0_V_TREADY = 1'b1;
    end else begin
        in0_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln89_reg_1539 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        out_V_TDATA_blk_n = out_V_TREADY;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln89_reg_1539 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        out_V_TVALID = 1'b1;
    end else begin
        out_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((1'b1 == ap_CS_fsm_state65) & (icmp_ln77_fu_1425_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state66 : begin
            if ((~((in0_V_TVALID == 1'b0) & (icmp_ln78_fu_1437_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state66) & (icmp_ln78_fu_1437_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end else if ((~((in0_V_TVALID == 1'b0) & (icmp_ln78_fu_1437_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state66) & (icmp_ln78_fu_1437_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end
        end
        ap_ST_fsm_state67 : begin
            if (((in0_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state67))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln89_fu_1485_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln89_fu_1485_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_1431_p2 = (indvar_flatten_reg_1386 + 9'd1);

assign add_ln79_fu_1474_p2 = (select_ln78_reg_1513 + 8'd1);

assign add_ln89_fu_1479_p2 = (outpix_reg_1408 + 8'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((out_V_TREADY == 1'b0) & (icmp_ln89_reg_1539 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state70_io) | ((out_V_TREADY == 1'b0) & (icmp_ln89_reg_1539 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state70_io) | ((out_V_TREADY == 1'b0) & (icmp_ln89_reg_1539 == 1'd0))));
end

always @ (*) begin
    ap_block_state66 = ((in0_V_TVALID == 1'b0) & (icmp_ln78_fu_1437_p2 == 1'd0));
end

assign ap_block_state69_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state70_io = ((out_V_TREADY == 1'b0) & (icmp_ln89_reg_1539 == 1'd0));
end

always @ (*) begin
    ap_block_state70_pp1_stage0_iter1 = ((out_V_TREADY == 1'b0) & (icmp_ln89_reg_1539 == 1'd0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign icmp_ln77_fu_1425_p2 = ((yp_reg_1375 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_1437_p2 = ((indvar_flatten_reg_1386 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_1443_p2 = ((xp_reg_1397 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_1485_p2 = ((outpix_reg_1408 == 8'd128) ? 1'b1 : 1'b0);

assign or_ln709_1_fu_1462_p2 = (in0_V_read_reg_1518 | buf_V_q0);

assign or_ln709_fu_1467_p2 = (or_ln709_1_fu_1462_p2 | in0_V_TDATA);

assign out_V_TDATA = buf_V_q0;

assign select_ln78_fu_1449_p3 = ((icmp_ln79_fu_1443_p2[0:0] == 1'b1) ? 8'd0 : xp_reg_1397);

assign yp_1_fu_1419_p2 = (yp_reg_1375 + 8'd1);

assign zext_ln79_fu_1457_p1 = select_ln78_fu_1449_p3;

assign zext_ln89_fu_1491_p1 = outpix_reg_1408;

endmodule //StreamingMaxPool_Batch_0_StreamingMaxPool_256u_2u_64u_s

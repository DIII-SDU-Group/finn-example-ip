// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="StreamingMaxPool_Batch_3_StreamingMaxPool_Batch_3,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.145000,HLS_SYN_LAT=1384,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=188,HLS_SYN_LUT=628,HLS_VERSION=2020_2}" *)

module StreamingMaxPool_Batch_3 (
        ap_clk,
        ap_rst_n,
        in0_V_TDATA,
        in0_V_TVALID,
        in0_V_TREADY,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_pp1_stage0 = 14'd4096;
parameter    ap_ST_fsm_state16 = 14'd8192;

input   ap_clk;
input   ap_rst_n;
input  [127:0] in0_V_TDATA;
input   in0_V_TVALID;
output   in0_V_TREADY;
output  [127:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;

 reg    ap_rst_n_inv;
reg    in0_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln78_fu_327_p2;
wire    ap_CS_fsm_state11;
reg    out_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln89_reg_429;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln89_reg_429_pp1_iter1_reg;
reg   [4:0] outpix_reg_298;
wire   [4:0] yp_1_fu_309_p2;
reg   [4:0] yp_1_reg_386;
wire    ap_CS_fsm_state9;
wire    regslice_both_out_V_U_apdone_blk;
wire   [0:0] icmp_ln77_fu_315_p2;
wire   [5:0] add_ln78_fu_321_p2;
reg   [5:0] add_ln78_reg_395;
reg    ap_block_state10;
wire   [4:0] select_ln78_fu_339_p3;
reg   [4:0] select_ln78_reg_403;
reg   [127:0] in0_V_read_reg_408;
reg   [3:0] buf_V_addr_17_reg_413;
wire   [4:0] add_ln79_fu_364_p2;
wire   [4:0] add_ln89_fu_369_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state13_pp1_stage0_iter0;
reg    ap_block_state14_pp1_stage0_iter1;
reg    ap_block_state14_io;
reg    ap_block_state15_pp1_stage0_iter2;
reg    ap_block_state15_io;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln89_fu_375_p2;
wire   [127:0] buf_V_q0;
wire    ap_CS_fsm_state12;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg   [3:0] buf_V_address0;
reg    buf_V_ce0;
reg    buf_V_we0;
reg   [3:0] buf_V_address1;
reg    buf_V_ce1;
reg    buf_V_we1;
reg   [127:0] buf_V_d1;
reg   [4:0] yp_reg_265;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state16;
reg   [5:0] indvar_flatten_reg_276;
reg   [4:0] xp_reg_287;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [63:0] zext_ln79_fu_347_p1;
wire   [63:0] zext_ln89_fu_381_p1;
reg    ap_block_pp1_stage0_01001;
wire   [127:0] or_ln709_fu_357_p2;
wire   [0:0] icmp_ln79_fu_333_p2;
wire   [127:0] or_ln709_1_fu_352_p2;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_in0_V_U_apdone_blk;
wire   [127:0] in0_V_TDATA_int_regslice;
wire    in0_V_TVALID_int_regslice;
reg    in0_V_TREADY_int_regslice;
wire    regslice_both_in0_V_U_ack_in;
reg    out_V_TVALID_int_regslice;
wire    out_V_TREADY_int_regslice;
wire    regslice_both_out_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
end

StreamingMaxPool_Batch_3_buf_V #(
    .DataWidth( 128 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
buf_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf_V_address0),
    .ce0(buf_V_ce0),
    .we0(buf_V_we0),
    .d0(128'd0),
    .q0(buf_V_q0),
    .address1(buf_V_address1),
    .ce1(buf_V_ce1),
    .we1(buf_V_we1),
    .d1(buf_V_d1)
);

StreamingMaxPool_Batch_3_regslice_both #(
    .DataWidth( 128 ))
regslice_both_in0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_V_TDATA),
    .vld_in(in0_V_TVALID),
    .ack_in(regslice_both_in0_V_U_ack_in),
    .data_out(in0_V_TDATA_int_regslice),
    .vld_out(in0_V_TVALID_int_regslice),
    .ack_out(in0_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_U_apdone_blk)
);

StreamingMaxPool_Batch_3_regslice_both #(
    .DataWidth( 128 ))
regslice_both_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(buf_V_q0),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(out_V_TREADY_int_regslice),
    .data_out(out_V_TDATA),
    .vld_out(regslice_both_out_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state13))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state13)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((in0_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        indvar_flatten_reg_276 <= add_ln78_reg_395;
    end else if (((icmp_ln77_fu_315_p2 == 1'd0) & (regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state9))) begin
        indvar_flatten_reg_276 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        outpix_reg_298 <= 5'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln89_fu_375_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        outpix_reg_298 <= add_ln89_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((in0_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        xp_reg_287 <= add_ln79_fu_364_p2;
    end else if (((icmp_ln77_fu_315_p2 == 1'd0) & (regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state9))) begin
        xp_reg_287 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        yp_reg_265 <= yp_1_reg_386;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        yp_reg_265 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln78_fu_327_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state10))) begin
        add_ln78_reg_395 <= add_ln78_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        buf_V_addr_17_reg_413 <= zext_ln79_fu_347_p1;
        in0_V_read_reg_408 <= in0_V_TDATA_int_regslice;
        select_ln78_reg_403 <= select_ln78_fu_339_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln89_reg_429 <= icmp_ln89_fu_375_p2;
        icmp_ln89_reg_429_pp1_iter1_reg <= icmp_ln89_reg_429;
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state9))) begin
        yp_1_reg_386 <= yp_1_fu_309_p2;
    end
end

always @ (*) begin
    if ((icmp_ln89_fu_375_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln89_fu_375_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        buf_V_address0 = zext_ln89_fu_381_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        buf_V_address0 = zext_ln79_fu_347_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_V_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_V_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buf_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_V_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_V_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_V_address0 = 64'd1;
    end else begin
        buf_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        buf_V_address1 = buf_V_addr_17_reg_413;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        buf_V_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        buf_V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_V_address1 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        buf_V_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_V_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_V_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        buf_V_address1 = 64'd0;
    end else begin
        buf_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | (~((icmp_ln78_fu_327_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state10)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln89_fu_375_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        buf_V_ce0 = 1'b1;
    end else begin
        buf_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | ((in0_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        buf_V_ce1 = 1'b1;
    end else begin
        buf_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        buf_V_d1 = or_ln709_fu_357_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8))) begin
        buf_V_d1 = 128'd0;
    end else begin
        buf_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln89_fu_375_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        buf_V_we0 = 1'b1;
    end else begin
        buf_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state8) | ((in0_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state11)))) begin
        buf_V_we1 = 1'b1;
    end else begin
        buf_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((icmp_ln78_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        in0_V_TDATA_blk_n = in0_V_TVALID_int_regslice;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((in0_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | (~((icmp_ln78_fu_327_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0)) & (icmp_ln78_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10)))) begin
        in0_V_TREADY_int_regslice = 1'b1;
    end else begin
        in0_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln89_reg_429_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((icmp_ln89_reg_429 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        out_V_TDATA_blk_n = out_V_TREADY_int_regslice;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln89_reg_429 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        out_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln77_fu_315_p2 == 1'd1) & (regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln77_fu_315_p2 == 1'd0) & (regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if ((~((icmp_ln78_fu_327_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0)) & (icmp_ln78_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if ((~((icmp_ln78_fu_327_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0)) & (icmp_ln78_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((in0_V_TVALID_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln89_fu_375_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln89_fu_375_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_321_p2 = (indvar_flatten_reg_276 + 6'd1);

assign add_ln79_fu_364_p2 = (select_ln78_reg_403 + 5'd1);

assign add_ln89_fu_369_p2 = (outpix_reg_298 + 5'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln89_reg_429_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (out_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln89_reg_429 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (out_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter2 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((icmp_ln89_reg_429_pp1_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((icmp_ln89_reg_429 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter2 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((icmp_ln89_reg_429_pp1_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp1_iter1 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((icmp_ln89_reg_429 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state10 = ((icmp_ln78_fu_327_p2 == 1'd0) & (in0_V_TVALID_int_regslice == 1'b0));
end

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((icmp_ln89_reg_429 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state14_pp1_stage0_iter1 = ((icmp_ln89_reg_429 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state15_io = ((icmp_ln89_reg_429_pp1_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state15_pp1_stage0_iter2 = ((icmp_ln89_reg_429_pp1_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln77_fu_315_p2 = ((yp_reg_265 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_327_p2 = ((indvar_flatten_reg_276 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_333_p2 = ((xp_reg_287 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_375_p2 = ((outpix_reg_298 == 5'd16) ? 1'b1 : 1'b0);

assign in0_V_TREADY = regslice_both_in0_V_U_ack_in;

assign or_ln709_1_fu_352_p2 = (in0_V_read_reg_408 | buf_V_q0);

assign or_ln709_fu_357_p2 = (or_ln709_1_fu_352_p2 | in0_V_TDATA_int_regslice);

assign out_V_TVALID = regslice_both_out_V_U_vld_out;

assign select_ln78_fu_339_p3 = ((icmp_ln79_fu_333_p2[0:0] == 1'b1) ? 5'd0 : xp_reg_287);

assign yp_1_fu_309_p2 = (yp_reg_265 + 5'd1);

assign zext_ln79_fu_347_p1 = select_ln78_fu_339_p3;

assign zext_ln89_fu_381_p1 = outpix_reg_298;

endmodule //StreamingMaxPool_Batch_3

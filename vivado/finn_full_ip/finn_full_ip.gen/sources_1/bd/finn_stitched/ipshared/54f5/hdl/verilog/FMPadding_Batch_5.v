// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FMPadding_Batch_5_FMPadding_Batch_5,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.665250,HLS_SYN_LAT=25603,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=62,HLS_SYN_LUT=477,HLS_VERSION=2020_2}" *)

module FMPadding_Batch_5 (
        ap_clk,
        ap_rst_n,
        in0_V_TDATA,
        in0_V_TVALID,
        in0_V_TREADY,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input  [7:0] in0_V_TDATA;
input   in0_V_TVALID;
output   in0_V_TREADY;
output  [7:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;

 reg    ap_rst_n_inv;
reg    in0_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln279_fu_170_p2;
wire   [0:0] empty_36_fu_320_p2;
wire   [0:0] empty_20_fu_410_p2;
reg    out_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln279_reg_464;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln279_reg_464_pp0_iter1_reg;
reg   [14:0] indvar_flatten11_reg_95;
reg   [3:0] y_reg_106;
reg   [12:0] indvar_flatten_reg_117;
reg   [3:0] x_reg_128;
reg   [8:0] simd_reg_139;
wire   [14:0] add_ln279_fu_164_p2;
reg    ap_predicate_op67_read_state2;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln279_1_fu_214_p3;
reg   [3:0] select_ln279_1_reg_468;
wire   [3:0] select_ln280_fu_228_p3;
reg   [3:0] select_ln280_reg_473;
wire   [0:0] tmp_fu_416_p1;
wire   [8:0] simd_1_fu_432_p3;
wire   [12:0] select_ln280_1_fu_446_p3;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [3:0] ap_phi_mux_y_phi_fu_110_p4;
reg   [3:0] ap_phi_mux_x_phi_fu_132_p4;
wire   [0:0] ap_phi_reg_pp0_iter0_outData_1_reg_150;
reg   [0:0] ap_phi_reg_pp0_iter1_outData_1_reg_150;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln280_fu_176_p2;
wire   [0:0] icmp_ln281_fu_196_p2;
wire   [0:0] xor_ln279_fu_190_p2;
wire   [3:0] add_ln279_1_fu_208_p2;
wire   [3:0] select_ln279_fu_182_p3;
wire   [0:0] and_ln279_fu_202_p2;
wire   [3:0] x_2_fu_222_p2;
wire   [0:0] empty_23_fu_242_p2;
wire   [0:0] empty_22_fu_236_p2;
wire   [0:0] empty_25_fu_254_p2;
wire   [0:0] empty_24_fu_248_p2;
wire   [0:0] empty_27_fu_266_p2;
wire   [0:0] empty_26_fu_260_p2;
wire   [0:0] empty_29_fu_278_p2;
wire   [0:0] empty_28_fu_272_p2;
wire   [0:0] empty_31_fu_290_p2;
wire   [0:0] empty_30_fu_284_p2;
wire   [0:0] empty_33_fu_302_p2;
wire   [0:0] empty_32_fu_296_p2;
wire   [0:0] empty_35_fu_314_p2;
wire   [0:0] empty_34_fu_308_p2;
wire   [0:0] empty_7_fu_332_p2;
wire   [0:0] empty_fu_326_p2;
wire   [0:0] empty_9_fu_344_p2;
wire   [0:0] empty_8_fu_338_p2;
wire   [0:0] empty_11_fu_356_p2;
wire   [0:0] empty_10_fu_350_p2;
wire   [0:0] empty_13_fu_368_p2;
wire   [0:0] empty_12_fu_362_p2;
wire   [0:0] empty_15_fu_380_p2;
wire   [0:0] empty_14_fu_374_p2;
wire   [0:0] empty_17_fu_392_p2;
wire   [0:0] empty_16_fu_386_p2;
wire   [0:0] empty_19_fu_404_p2;
wire   [0:0] empty_18_fu_398_p2;
wire   [0:0] or_ln281_fu_426_p2;
wire   [8:0] add_ln281_fu_420_p2;
wire   [12:0] add_ln280_1_fu_440_p2;
reg   [2:0] ap_NS_fsm;
wire    ap_CS_fsm_state5;
wire    regslice_both_out_V_U_apdone_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in0_V_U_apdone_blk;
wire   [7:0] in0_V_TDATA_int_regslice;
wire    in0_V_TVALID_int_regslice;
reg    in0_V_TREADY_int_regslice;
wire    regslice_both_in0_V_U_ack_in;
wire   [7:0] out_V_TDATA_int_regslice;
reg    out_V_TVALID_int_regslice;
wire    out_V_TREADY_int_regslice;
wire    regslice_both_out_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

FMPadding_Batch_5_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in0_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in0_V_TDATA),
    .vld_in(in0_V_TVALID),
    .ack_in(regslice_both_in0_V_U_ack_in),
    .data_out(in0_V_TDATA_int_regslice),
    .vld_out(in0_V_TVALID_int_regslice),
    .ack_out(in0_V_TREADY_int_regslice),
    .apdone_blk(regslice_both_in0_V_U_apdone_blk)
);

FMPadding_Batch_5_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_V_TDATA_int_regslice),
    .vld_in(out_V_TVALID_int_regslice),
    .ack_in(out_V_TREADY_int_regslice),
    .data_out(out_V_TDATA),
    .vld_out(regslice_both_out_V_U_vld_out),
    .ack_out(out_V_TREADY),
    .apdone_blk(regslice_both_out_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((empty_36_fu_320_p2 == 1'd1) & (icmp_ln279_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((empty_20_fu_410_p2 == 1'd1) & (empty_36_fu_320_p2 == 1'd0) & (icmp_ln279_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_phi_reg_pp0_iter1_outData_1_reg_150 <= 1'd0;
    end else if (((empty_20_fu_410_p2 == 1'd0) & (empty_36_fu_320_p2 == 1'd0) & (icmp_ln279_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_outData_1_reg_150 <= tmp_fu_416_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_outData_1_reg_150 <= ap_phi_reg_pp0_iter0_outData_1_reg_150;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten11_reg_95 <= add_ln279_fu_164_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten11_reg_95 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_117 <= select_ln280_1_fu_446_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten_reg_117 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        simd_reg_139 <= simd_1_fu_432_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        simd_reg_139 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_reg_464 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_reg_128 <= select_ln280_reg_473;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_reg_128 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_reg_464 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_reg_106 <= select_ln279_1_reg_468;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        y_reg_106 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln279_reg_464 <= icmp_ln279_fu_170_p2;
        icmp_ln279_reg_464_pp0_iter1_reg <= icmp_ln279_reg_464;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln279_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln279_1_reg_468 <= select_ln279_1_fu_214_p3;
        select_ln280_reg_473 <= select_ln280_fu_228_p3;
    end
end

always @ (*) begin
    if ((icmp_ln279_fu_170_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln279_reg_464 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_x_phi_fu_132_p4 = select_ln280_reg_473;
    end else begin
        ap_phi_mux_x_phi_fu_132_p4 = x_reg_128;
    end
end

always @ (*) begin
    if (((icmp_ln279_reg_464 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_y_phi_fu_110_p4 = select_ln279_1_reg_468;
    end else begin
        ap_phi_mux_y_phi_fu_110_p4 = y_reg_106;
    end
end

always @ (*) begin
    if (((empty_20_fu_410_p2 == 1'd0) & (empty_36_fu_320_p2 == 1'd0) & (icmp_ln279_fu_170_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in0_V_TDATA_blk_n = in0_V_TVALID_int_regslice;
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op67_read_state2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in0_V_TREADY_int_regslice = 1'b1;
    end else begin
        in0_V_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln279_reg_464_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln279_reg_464 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_V_TDATA_blk_n = out_V_TREADY_int_regslice;
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln279_reg_464 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_V_TVALID_int_regslice = 1'b1;
    end else begin
        out_V_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln279_fu_170_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln279_fu_170_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((regslice_both_out_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln279_1_fu_208_p2 = (ap_phi_mux_y_phi_fu_110_p4 + 4'd1);

assign add_ln279_fu_164_p2 = (indvar_flatten11_reg_95 + 15'd1);

assign add_ln280_1_fu_440_p2 = (indvar_flatten_reg_117 + 13'd1);

assign add_ln281_fu_420_p2 = (simd_reg_139 + 9'd1);

assign and_ln279_fu_202_p2 = (xor_ln279_fu_190_p2 & icmp_ln281_fu_196_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_predicate_op67_read_state2 == 1'b1) & (in0_V_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln279_reg_464_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (out_V_TREADY_int_regslice == 1'b0)) | ((icmp_ln279_reg_464 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_V_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_predicate_op67_read_state2 == 1'b1) & (in0_V_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln279_reg_464_pp0_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln279_reg_464 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_predicate_op67_read_state2 == 1'b1) & (in0_V_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln279_reg_464_pp0_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((icmp_ln279_reg_464 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((ap_predicate_op67_read_state2 == 1'b1) & (in0_V_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln279_reg_464 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln279_reg_464 == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((icmp_ln279_reg_464_pp0_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln279_reg_464_pp0_iter1_reg == 1'd0) & (out_V_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_outData_1_reg_150 = 'bx;

always @ (*) begin
    ap_predicate_op67_read_state2 = ((empty_20_fu_410_p2 == 1'd0) & (empty_36_fu_320_p2 == 1'd0) & (icmp_ln279_fu_170_p2 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_10_fu_350_p2 = (empty_9_fu_344_p2 | empty_8_fu_338_p2);

assign empty_11_fu_356_p2 = ((select_ln280_fu_228_p3 == 4'd12) ? 1'b1 : 1'b0);

assign empty_12_fu_362_p2 = (empty_11_fu_356_p2 | empty_10_fu_350_p2);

assign empty_13_fu_368_p2 = ((select_ln280_fu_228_p3 == 4'd11) ? 1'b1 : 1'b0);

assign empty_14_fu_374_p2 = (empty_13_fu_368_p2 | empty_12_fu_362_p2);

assign empty_15_fu_380_p2 = ((select_ln280_fu_228_p3 == 4'd10) ? 1'b1 : 1'b0);

assign empty_16_fu_386_p2 = (empty_15_fu_380_p2 | empty_14_fu_374_p2);

assign empty_17_fu_392_p2 = ((select_ln280_fu_228_p3 == 4'd9) ? 1'b1 : 1'b0);

assign empty_18_fu_398_p2 = (empty_17_fu_392_p2 | empty_16_fu_386_p2);

assign empty_19_fu_404_p2 = ((select_ln280_fu_228_p3 == 4'd0) ? 1'b1 : 1'b0);

assign empty_20_fu_410_p2 = (empty_19_fu_404_p2 | empty_18_fu_398_p2);

assign empty_22_fu_236_p2 = ((select_ln279_1_fu_214_p3 == 4'd15) ? 1'b1 : 1'b0);

assign empty_23_fu_242_p2 = ((select_ln279_1_fu_214_p3 == 4'd14) ? 1'b1 : 1'b0);

assign empty_24_fu_248_p2 = (empty_23_fu_242_p2 | empty_22_fu_236_p2);

assign empty_25_fu_254_p2 = ((select_ln279_1_fu_214_p3 == 4'd13) ? 1'b1 : 1'b0);

assign empty_26_fu_260_p2 = (empty_25_fu_254_p2 | empty_24_fu_248_p2);

assign empty_27_fu_266_p2 = ((select_ln279_1_fu_214_p3 == 4'd12) ? 1'b1 : 1'b0);

assign empty_28_fu_272_p2 = (empty_27_fu_266_p2 | empty_26_fu_260_p2);

assign empty_29_fu_278_p2 = ((select_ln279_1_fu_214_p3 == 4'd11) ? 1'b1 : 1'b0);

assign empty_30_fu_284_p2 = (empty_29_fu_278_p2 | empty_28_fu_272_p2);

assign empty_31_fu_290_p2 = ((select_ln279_1_fu_214_p3 == 4'd10) ? 1'b1 : 1'b0);

assign empty_32_fu_296_p2 = (empty_31_fu_290_p2 | empty_30_fu_284_p2);

assign empty_33_fu_302_p2 = ((select_ln279_1_fu_214_p3 == 4'd9) ? 1'b1 : 1'b0);

assign empty_34_fu_308_p2 = (empty_33_fu_302_p2 | empty_32_fu_296_p2);

assign empty_35_fu_314_p2 = ((select_ln279_1_fu_214_p3 == 4'd0) ? 1'b1 : 1'b0);

assign empty_36_fu_320_p2 = (empty_35_fu_314_p2 | empty_34_fu_308_p2);

assign empty_7_fu_332_p2 = ((select_ln280_fu_228_p3 == 4'd14) ? 1'b1 : 1'b0);

assign empty_8_fu_338_p2 = (empty_fu_326_p2 | empty_7_fu_332_p2);

assign empty_9_fu_344_p2 = ((select_ln280_fu_228_p3 == 4'd13) ? 1'b1 : 1'b0);

assign empty_fu_326_p2 = ((select_ln280_fu_228_p3 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln279_fu_170_p2 = ((indvar_flatten11_reg_95 == 15'd25600) ? 1'b1 : 1'b0);

assign icmp_ln280_fu_176_p2 = ((indvar_flatten_reg_117 == 13'd2560) ? 1'b1 : 1'b0);

assign icmp_ln281_fu_196_p2 = ((simd_reg_139 == 9'd256) ? 1'b1 : 1'b0);

assign in0_V_TREADY = regslice_both_in0_V_U_ack_in;

assign or_ln281_fu_426_p2 = (icmp_ln280_fu_176_p2 | and_ln279_fu_202_p2);

assign out_V_TDATA_int_regslice = ap_phi_reg_pp0_iter1_outData_1_reg_150;

assign out_V_TVALID = regslice_both_out_V_U_vld_out;

assign select_ln279_1_fu_214_p3 = ((icmp_ln280_fu_176_p2[0:0] == 1'b1) ? add_ln279_1_fu_208_p2 : ap_phi_mux_y_phi_fu_110_p4);

assign select_ln279_fu_182_p3 = ((icmp_ln280_fu_176_p2[0:0] == 1'b1) ? 4'd0 : ap_phi_mux_x_phi_fu_132_p4);

assign select_ln280_1_fu_446_p3 = ((icmp_ln280_fu_176_p2[0:0] == 1'b1) ? 13'd1 : add_ln280_1_fu_440_p2);

assign select_ln280_fu_228_p3 = ((and_ln279_fu_202_p2[0:0] == 1'b1) ? x_2_fu_222_p2 : select_ln279_fu_182_p3);

assign simd_1_fu_432_p3 = ((or_ln281_fu_426_p2[0:0] == 1'b1) ? 9'd1 : add_ln281_fu_420_p2);

assign tmp_fu_416_p1 = in0_V_TDATA_int_regslice[0:0];

assign x_2_fu_222_p2 = (select_ln279_fu_182_p3 + 4'd1);

assign xor_ln279_fu_190_p2 = (icmp_ln280_fu_176_p2 ^ 1'd1);

endmodule //FMPadding_Batch_5

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fetch_finn is
generic (
    C_S_AXI_AXI_CPU_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXI_CPU_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    finn_stream_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    finn_stream_V_TVALID : IN STD_LOGIC;
    finn_stream_V_TREADY : OUT STD_LOGIC;
    s_axi_AXI_CPU_AWVALID : IN STD_LOGIC;
    s_axi_AXI_CPU_AWREADY : OUT STD_LOGIC;
    s_axi_AXI_CPU_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_CPU_WVALID : IN STD_LOGIC;
    s_axi_AXI_CPU_WREADY : OUT STD_LOGIC;
    s_axi_AXI_CPU_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_DATA_WIDTH-1 downto 0);
    s_axi_AXI_CPU_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_DATA_WIDTH/8-1 downto 0);
    s_axi_AXI_CPU_ARVALID : IN STD_LOGIC;
    s_axi_AXI_CPU_ARREADY : OUT STD_LOGIC;
    s_axi_AXI_CPU_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_CPU_RVALID : OUT STD_LOGIC;
    s_axi_AXI_CPU_RREADY : IN STD_LOGIC;
    s_axi_AXI_CPU_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_CPU_DATA_WIDTH-1 downto 0);
    s_axi_AXI_CPU_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXI_CPU_BVALID : OUT STD_LOGIC;
    s_axi_AXI_CPU_BREADY : IN STD_LOGIC;
    s_axi_AXI_CPU_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of fetch_finn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fetch_finn_fetch_finn,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.790000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=141,HLS_SYN_LUT=199,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal res_out_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal res_out_ce0 : STD_LOGIC;
    signal res_out_we0 : STD_LOGIC;
    signal res_out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal finn_stream_V_TDATA_blk_n : STD_LOGIC;
    signal tmp_1_reg_180 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_reg_185 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln14_fu_152_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln14_reg_190 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal and_ln_fu_123_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln1_fu_156_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln2_fu_164_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_172_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_113_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_finn_stream_V_U_apdone_blk : STD_LOGIC;
    signal finn_stream_V_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal finn_stream_V_TVALID_int_regslice : STD_LOGIC;
    signal finn_stream_V_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_finn_stream_V_U_ack_in : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fetch_finn_AXI_CPU_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        res_out_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        res_out_ce0 : IN STD_LOGIC;
        res_out_we0 : IN STD_LOGIC;
        res_out_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fetch_finn_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    AXI_CPU_s_axi_U : component fetch_finn_AXI_CPU_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXI_CPU_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXI_CPU_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXI_CPU_AWVALID,
        AWREADY => s_axi_AXI_CPU_AWREADY,
        AWADDR => s_axi_AXI_CPU_AWADDR,
        WVALID => s_axi_AXI_CPU_WVALID,
        WREADY => s_axi_AXI_CPU_WREADY,
        WDATA => s_axi_AXI_CPU_WDATA,
        WSTRB => s_axi_AXI_CPU_WSTRB,
        ARVALID => s_axi_AXI_CPU_ARVALID,
        ARREADY => s_axi_AXI_CPU_ARREADY,
        ARADDR => s_axi_AXI_CPU_ARADDR,
        RVALID => s_axi_AXI_CPU_RVALID,
        RREADY => s_axi_AXI_CPU_RREADY,
        RDATA => s_axi_AXI_CPU_RDATA,
        RRESP => s_axi_AXI_CPU_RRESP,
        BVALID => s_axi_AXI_CPU_BVALID,
        BREADY => s_axi_AXI_CPU_BREADY,
        BRESP => s_axi_AXI_CPU_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        res_out_address0 => res_out_address0,
        res_out_ce0 => res_out_ce0,
        res_out_we0 => res_out_we0,
        res_out_d0 => res_out_d0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_finn_stream_V_U : component fetch_finn_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => finn_stream_V_TDATA,
        vld_in => finn_stream_V_TVALID,
        ack_in => regslice_both_finn_stream_V_U_ack_in,
        data_out => finn_stream_V_TDATA_int_regslice,
        vld_out => finn_stream_V_TVALID_int_regslice,
        ack_out => finn_stream_V_TREADY_int_regslice,
        apdone_blk => regslice_both_finn_stream_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                tmp_1_reg_180 <= finn_stream_V_TDATA_int_regslice(22 downto 16);
                tmp_2_reg_185 <= finn_stream_V_TDATA_int_regslice(14 downto 8);
                trunc_ln14_reg_190 <= trunc_ln14_fu_152_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, finn_stream_V_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((finn_stream_V_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    and_ln1_fu_156_p3 <= (tmp_1_reg_180 & ap_const_lv1_0);
    and_ln2_fu_164_p3 <= (tmp_2_reg_185 & ap_const_lv1_0);
    and_ln_fu_123_p3 <= (tmp_fu_113_p4 & ap_const_lv1_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, finn_stream_V_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((finn_stream_V_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    finn_stream_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, finn_stream_V_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            finn_stream_V_TDATA_blk_n <= finn_stream_V_TVALID_int_regslice;
        else 
            finn_stream_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    finn_stream_V_TREADY <= regslice_both_finn_stream_V_U_ack_in;

    finn_stream_V_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, finn_stream_V_TVALID_int_regslice)
    begin
        if ((not(((finn_stream_V_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            finn_stream_V_TREADY_int_regslice <= ap_const_logic_1;
        else 
            finn_stream_V_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    res_out_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_out_address0 <= ap_const_lv64_3(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            res_out_address0 <= ap_const_lv64_2(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_out_address0 <= ap_const_lv64_1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            res_out_address0 <= ap_const_lv64_0(2 - 1 downto 0);
        else 
            res_out_address0 <= "XX";
        end if; 
    end process;


    res_out_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, finn_stream_V_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((finn_stream_V_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            res_out_ce0 <= ap_const_logic_1;
        else 
            res_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    res_out_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, and_ln_fu_123_p3, and_ln1_fu_156_p3, and_ln2_fu_164_p3, shl_ln_fu_172_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            res_out_d0 <= shl_ln_fu_172_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            res_out_d0 <= and_ln2_fu_164_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            res_out_d0 <= and_ln1_fu_156_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            res_out_d0 <= and_ln_fu_123_p3;
        else 
            res_out_d0 <= "XXXXXXXX";
        end if; 
    end process;


    res_out_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, finn_stream_V_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (not(((finn_stream_V_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            res_out_we0 <= ap_const_logic_1;
        else 
            res_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_172_p3 <= (trunc_ln14_reg_190 & ap_const_lv1_0);
    tmp_fu_113_p4 <= finn_stream_V_TDATA_int_regslice(30 downto 24);
    trunc_ln14_fu_152_p1 <= finn_stream_V_TDATA_int_regslice(7 - 1 downto 0);
end behav;
